import{j as e}from"./index-04de45f1.js";import{D as t}from"./DemoLayout-89a84ba0.js";import{C as o}from"./Views-9d427d6f.js";import"./AdaptableCard-b66d711f.js";import"./Card-5dadf163.js";import"./Affix-efc50e98.js";import"./Button-c014eb4a.js";import"./context-3f43d22b.js";import"./Tooltip-8263a1ca.js";import"./usePopper-301f1b7b.js";import"./index.esm-86efb1ff.js";import"./index-5206a52a.js";import"./index.esm-dece01db.js";import"./SyntaxHighlighter-b6d1a340.js";import"./toConsumableArray-c4879a90.js";import"./objectWithoutPropertiesLoose-df62547b.js";import"./index-5ffe062f.js";import"./DemoComponentApi-46ba6f54.js";import"./index-f4f40370.js";import"./index.esm-bec52084.js";const r=()=>e.jsx(o,{children:"Content"}),i="ContainerDoc",m={title:"Container",desc:"Container is acomponent for fixing an elements width to the current breakpoint, it given a <code>max-width</code> to an element and match the <code>min-width</code> of the current breakpoint."},n=[{mdName:"Example",mdPath:i,title:"Example",desc:"Example usage",component:e.jsx(r,{})}],a=[{component:"Container",api:[{propName:"asElement",type:"<code>string</code>",default:"<code>'div'</code>",desc:"Render element"}]}],N=()=>e.jsx(t,{innerFrame:!1,header:m,demos:n,api:a,mdPrefixPath:"shared"});export{N as default};
