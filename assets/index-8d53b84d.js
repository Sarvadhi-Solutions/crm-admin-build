import{r as d,j as t}from"./index-b09faefa.js";import{D as l}from"./DemoLayout-c746e798.js";import{F as c}from"./FormCustomFormatInput-1a9bef7f.js";import{B as u}from"./Button-3bdf4581.js";import{F as f,a as n}from"./FormItem-cdcc11d5.js";import{F as h,a as g,b as x}from"./formik.esm-93e44345.js";import{a5 as b}from"./index.esm-2c67faf2.js";import"./AdaptableCard-9a87f3ff.js";import"./Card-33431fc8.js";import"./Views-57e82c67.js";import"./Affix-b10a496a.js";import"./Tooltip-5b8c5fcd.js";import"./usePopper-29fe3cd5.js";import"./index.esm-7a963ea9.js";import"./index-62df96f3.js";import"./SyntaxHighlighter-e97b96e2.js";import"./objectWithoutProperties-8e2777d0.js";import"./objectWithoutPropertiesLoose-4f48578a.js";import"./toConsumableArray-f69b773e.js";import"./extends-98964cd2.js";import"./index-abb4ede3.js";import"./DemoComponentApi-d5bf32a3.js";import"./index-a157bc37.js";import"./index.esm-dbc068f5.js";import"./react-number-format.es-25924e56.js";import"./Input-8c731b0c.js";import"./context-80e77f1b.js";import"./isNil-f81aee01.js";import"./get-263a9377.js";import"./toString-9cef9a7f.js";import"./_MapCache-a97510fd.js";const F=e=>{if(e==="")return"";const r=parseFloat(e);return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",maximumFractionDigits:0}).format(r)},y=()=>{const[e,r]=d.useState(0),o=a=>{console.log(a),r(a.floatValue)};return t.jsx(c,{value:e,format:F,onValueChange:o})};function s(e,r){return e.length===1&&e[0]>r[0]&&(e="0"+e),e.length===2&&(Number(e)===0?e="01":e>r&&(e=r)),e}function N(e){const r=s(e.substring(0,2),"12"),o=s(e.substring(2,4),"31");return r+(o.length?"/"+o:"")}const j=()=>t.jsx(h,{initialValues:{expiredDate:0},onSubmit:(e,{resetForm:r,setSubmitting:o})=>{o(!0),setTimeout(()=>{alert(JSON.stringify(e,null,2)),o(!1),r()},400)},children:({touched:e,errors:r,isSubmitting:o})=>t.jsx(g,{children:t.jsxs(f,{children:[t.jsx(n,{label:"Expired Date",invalid:r.expiredDate&&e.expiredDate,errorMessage:r.expiredDate,children:t.jsx(x,{name:"expiredDate",children:({field:a,form:i})=>t.jsx(c,{form:i,field:a,placeholder:"••/••",inputSuffix:t.jsx(b,{className:"text-lg"}),format:N,defaultValue:i.values.cardExpiry,onValueChange:p=>{i.setFieldValue(a.name,p.value)}})})}),t.jsx(n,{children:t.jsx(u,{variant:"solid",loading:o,type:"submit",children:"Submit"})})]})})}),m="FormCustomFormatInputDoc",C={title:"FormCustomFormatInput",desc:'FormCustomFormatInput wrapped Input component with <a class="text-indigo-600 underline" href="https://github.com/s-yadav/react-number-format" target="_blank">react-number-format</a>.'},k=[{mdName:"Simple",mdPath:m,title:"Simple",desc:'Basic usage of FormCustomFormatInput, all <a class="text-indigo-600 underline" href="https://s-yadav.github.io/react-number-format/docs/customization" target="_blank">react-number-format props</a> can be apply to this component as well.',component:t.jsx(y,{})},{mdName:"WithForm",mdPath:m,title:"WithForm",desc:'Example usage with <a class="text-indigo-600 underline" href="https://formik.org/" target="_blank">Formik</a>',component:t.jsx(j,{})}],D=[{component:"FormCustomFormatInput",api:[{propName:"field",type:"<code>{string: any, value: any, onBlur:() => void, onChange:() => void}</code>",default:"-",desc:"Formik field props"},{propName:"form",type:'<a class="text-indigo-600 underline" href="https://formik.org/docs/api/formik#props-1" target="_blank"><code>FormikProp</code></a>',default:"-",desc:"Formik field props"},{propName:"inputPrefix",type:"<code>string</code> | <code>ReactNode</code>",default:"-",desc:"Render a prefix content inside Input"},{propName:"inputSuffix",type:"<code>string</code> | <code>ReactNode</code>",default:"-",desc:"Render a suffix content inside Input"},{propName:"format",type:"<code>(value: string) => string</code>",default:"-",desc:"A format function which can turn any numeric string to a formatted string."},{propName:"removeFormatting",type:"<code>(value: string) => string</code>",default:"-",desc:"A function to removing formatting from a formatted string and return numeric string."},{propName:"getCaretBoundary",type:"<code>(formattedValue: string) => boolean[]</code>",default:"-",desc:"A function given a formatted string, returns boundaries of valid cursor position. basically an array of boolean, where index of specify caret position. true at a index signifies user can put their caret at the position, false means the caret position is not allowed and the caret will move to closet allowed position."},{propName:"isValidInputCharacter",type:"<code>(character: string) => boolean</code>",default:"-",desc:"A function to tell if a character in the formatted value is a valid typeable character. You don't need to pass it most of the time, as it defaults numeric characters (0-9). But case like additional character is allowed to type, for example decimal separator in currency format."}]}],I=t.jsxs("div",{className:"demo-api-table mb-12",children:[t.jsx("h4",{className:"mb-5",children:"Dependencies"}),t.jsx("h6",{id:"react-number-format-api",className:"mb-3",children:"React number format"}),t.jsxs("p",{children:["All common React number format props can be applied on this component, refer"," ",t.jsx("a",{className:"underline text-indigo-600",href:"https://s-yadav.github.io/react-number-format/docs/props",target:"_blank",rel:"noreferrer",children:"official docs"})," ","for the complete this.props.first list."," "]})]}),ae=()=>t.jsx(l,{innerFrame:!1,header:C,demos:k,api:D,mdPrefixPath:"shared",extra:I});export{ae as default};
